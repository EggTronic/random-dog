{"version":3,"sources":["components/Box.jsx","utils/utils.js","components/BoxContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Box","boxElement","url","type","src","alt","controls","console","log","className","IMAGE_TYPES","VIDEO_TYPES","getFileType","split","pop","includes","size","a","result","i","fetch","method","response","json","data","push","BoxContainer","useState","setData","isLoading","setIsLoading","getData","fetchData","then","res","useEffect","map","key","onClick","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mNAgCeA,MAxBf,YAA6B,IACxBC,EADUC,EAAa,EAAbA,IAGd,OAH2B,EAARC,MAIlB,IAAK,QACJF,EAAa,yBAAKG,IAAKF,EAAKG,IAAI,QAChC,MACD,IAAK,QACJJ,EAAa,2BAAOK,UAAQ,GACpB,4BAAQF,IAAKF,EAAKC,KAAK,cADlB,gDAIb,MACD,QACCI,QAAQC,IAAI,gBAGd,OACC,yBAAKC,UAAU,OACbR,I,uBC3BES,EAAc,CAAC,MAAO,MAAO,OAC7BC,EAAc,CAAC,OAGd,SAASC,EAAYV,GAExB,IAAMC,EAAOD,EAAIW,MAAM,KAAKC,MAG5B,OAAIJ,EAAYK,SAASZ,GACd,QAIPQ,EAAYI,SAASZ,GACd,QAIJ,U,4CAIJ,WAAyBD,EAAKc,GAA9B,uBAAAC,EAAA,sDACCC,EAAS,GAEJC,EAAI,EAHV,YAGaA,EAAIH,GAHjB,iCAIsBI,MAAMlB,EAAK,CAC5BmB,OAAQ,QALb,cAIKC,EAJL,gBAQkBA,EAASC,OAR3B,OAQKC,EARL,OASKrB,EAAOS,EAAYY,EAAKtB,KAT7B,WAYiB,YAATC,EAZR,kCAasBiB,MAAMlB,EAAK,CACxBmB,OAAQ,QAdjB,eAaKC,EAbL,iBAgBkBA,EAASC,OAhB3B,QAgBKC,EAhBL,OAiBKrB,EAAOS,EAAYY,EAAKtB,KAjB7B,wBAoBCgB,EAAOO,KAAK,CACRvB,IAAKsB,EAAKtB,IACVC,KAAMA,IAtBX,QAGuBgB,IAHvB,gDA0BID,GA1BJ,6C,sBCwBQQ,MA3Cf,WAEE,IAFsB,EAMAC,mBAAS,IANT,mBAMjBH,EANiB,KAMXI,EANW,OAOUD,oBAAS,GAPnB,mBAOjBE,EAPiB,KAONC,EAPM,KAUhBC,EAAU,WACdD,GAAa,GDQV,SAAP,oCCPIE,CAVU,+BACC,GASUC,MAAK,SAAAC,GACxBJ,GAAa,GACbF,EAAQM,OAUZ,OALAC,qBAAU,WACRJ,MACC,IAID,oCACE,yBAAKtB,UAAU,iBACZe,EAAKY,KAAI,SAAAZ,GACR,OAAO,kBAAC,EAAD,CAAKa,IAAKb,EAAKtB,IAAKA,IAAKsB,EAAKtB,IAAKC,KAAMqB,EAAKrB,WAIzD,4BACEM,UAAWoB,EAAU,mBAAmB,WACxCS,QAASP,EACTQ,SAAUV,GAETA,EAAY,UAAY,qB,MC7BlBW,MARf,WACE,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,QCKcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,a","file":"static/js/main.42a6ef9e.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nBox.propTypes = {\r\n\turl: PropTypes.string,\r\n\ttype: PropTypes.string\r\n};\r\n\r\nfunction Box({ url, type }) {\r\n\tlet boxElement;\r\n\r\n\tswitch (type) {\r\n\t\tcase 'image':\r\n\t\t\tboxElement = <img src={url} alt='img' />;\r\n\t\t\tbreak;\r\n\t\tcase 'video':\r\n\t\t\tboxElement = <video controls>\r\n\t\t\t\t\t\t\t\t\t\t <source src={url} type=\"video/mp4\" />\r\n\t\t\t\t\t\t\t\t\t\t Your browser does not support the video tag.\r\n\t\t\t\t\t\t\t\t\t </video>\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tconsole.log('invalid type');\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='box'>\r\n\t\t\t{boxElement}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Box;\r\n\r\n","const IMAGE_TYPES = ['jpg', 'gif', 'png'];\r\nconst VIDEO_TYPES = ['mp4'];\r\n\r\n// check file type with given url\r\nexport function getFileType(url) {\r\n    // get file type\r\n    const type = url.split('.').pop();\r\n\r\n    // check if it is image\r\n    if (IMAGE_TYPES.includes(type)) {\r\n        return 'image';\r\n    }\r\n\r\n    // check if it is video\r\n    if (VIDEO_TYPES.includes(type)) {\r\n        return 'video';\r\n    }\r\n\r\n    // return invalid if no match\r\n    return 'invalid';\r\n}\r\n\r\n// fetch data with given batch size and source url\r\nexport async function fetchData(url, size) {\r\n    let result = [];\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        let response = await fetch(url, {\r\n            method: 'GET'\r\n        });\r\n\r\n        let data = await response.json();\r\n        let type = getFileType(data.url);\r\n\r\n        // refetch if type is not image nor video\r\n        while (type === 'invalid') {\r\n            response = await fetch(url, {\r\n                method: 'GET'\r\n            });\r\n            data = await response.json();\r\n            type = getFileType(data.url);\r\n        }\r\n\r\n        result.push({\r\n            url: data.url, \r\n            type: type\r\n        })\r\n    }\r\n    \r\n    return result;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Box from './Box';\r\nimport { fetchData } from '../utils/utils';\r\n\r\nfunction BoxContainer() {\r\n  // constants\r\n  const API = 'https://random.dog/woof.json';\r\n  const SIZE = 8;\r\n\r\n  // init state\r\n  let [data, setData] = useState([]);\r\n  let [isLoading, setIsLoading] = useState(false);\r\n\r\n  // function to fetch data\r\n  const getData = () => {\r\n    setIsLoading(true);\r\n    fetchData(API, SIZE).then(res => {\r\n      setIsLoading(false);\r\n      setData(res);\r\n    });\r\n  }\r\n\r\n  // handling side effect, only execute once\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  // render boxes\r\n  return (\r\n    <>\r\n      <div className='box-container'>\r\n        {data.map(data => {\r\n          return <Box key={data.url} url={data.url} type={data.type} />\r\n        })}\r\n      </div>\r\n\r\n      <button \r\n        className={isLoading?'myDisabledButton':'myButton'} \r\n        onClick={getData} \r\n        disabled={isLoading}\r\n      > \r\n        {isLoading ? 'Loading' : 'Get Random Dogs' }\r\n      </button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BoxContainer;\r\n","import React from 'react';\nimport BoxContainer from './components/BoxContainer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BoxContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}